name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      # - name: Run ESLint
      #   run: npm run lint

      # - name: Run Prettier Check
      #   run: npm run prettier:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test -- --coverage

  build_and_push_ecr:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: test
    env:
      AWS_ROLE_ARN: ${{vars.AWS_ROLE_ARN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      IMAGE_NAME: ${{github.repository}}/${{github.ref_name}}
      IMAGE_TAG: ${{github.sha}}
      AWS_ACCOUNT_ID: ${{vars.AWS_ACCOUNT_ID}}
      AWS_REGION: ${{vars.AWS_REGION}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v2
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME }}" || \
          aws ecr create-repository --repository-name "${{ env.IMAGE_NAME }}"

      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          REPO_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          docker build -t $REPO_URI:$IMAGE_TAG .

      - name: Push Docker Image to ECR
        run: |
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          REPO_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          docker push $REPO_URI:$IMAGE_TAG

  deploy_eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build_and_push_ecr
    env:
      AWS_ROLE_ARN: ${{vars.AWS_ROLE_ARN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      IMAGE_NAME: ${{github.repository}}/${{github.ref_name}}
      IMAGE_TAG: ${{github.sha}}
      AWS_ACCOUNT_ID: ${{vars.AWS_ACCOUNT_ID}}
      AWS_REGION: ${{vars.AWS_REGION}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Set Kubernetes context to the EKS cluster
        run: kubectl config use-context arn:aws:eks:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:cluster/${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy Kubernetes resources
        run: |
          kubectl set image -f k8s/ --all "*=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          kubectl apply -f k8s/
